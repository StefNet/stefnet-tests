{"version":3,"sources":["VideoCamera.js","hooks/useUserMedia.js","App.js","utils.js","reportWebVitals.js","index.js"],"names":["VideoCamera","videoRef","constraints","useState","stream","setStream","error","setError","status","setStatus","useEffect","canceled","navigator","mediaDevices","getUserMedia","then","useUserMedia","video","current","srcObject","setAttribute","play","message","ref","bodyPartsEmoticons","nose","leftEye","rightEye","drawEmoticons","pose","videoWidth","videoHeight","canvas","keypoints","bodyparts","ctx","getContext","filteredResult","reduce","filtered","option","Object","keys","includes","part","push","emoticon","width","height","minConfidence","scale","font","textAlign","i","length","keypoint","score","position","y","x","beginPath","arc","Math","PI","fillText","drawTextPoints","App","facingMode","setFacingMode","webcamEl","useRef","canvasEl","handleCameraClick","useCallback","mediaStream","camera","console","log","getTracks","forEach","track","stop","removeTrack","stopAndRemoveTrack","detectPose","posenet_model","a","readyState","estimateSinglePose","posenet","inputResolution","model","setInterval","initPoseNet","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9d22a7a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useUserMedia from \"./hooks/useUserMedia\";\n\nfunction VideoCamera({ videoRef, constraints }) {\n  const { error, status, stream } = useUserMedia(constraints);\n\n  useEffect(() => {\n    if (status !== \"resolved\" || !stream) {\n      return;\n    }\n\n    const video = videoRef.current;\n\n    video.srcObject = stream;\n    video.setAttribute(\"playsinline\", true);\n    video.setAttribute(\"autoplay\", true);\n    video.play();\n  }, [stream]);\n\n  if (status === \"pending\") {\n    return <p>{\"Loading...\"}</p>;\n  }\n\n  if (status === \"rejected\") {\n    return <p>{error.message}</p>;\n  }\n\n  return <video ref={videoRef} />;\n}\n\nexport default VideoCamera;\n","import { useEffect, useState } from \"react\";\n\nexport default function useUserMedia(constraints) {\n  const [stream, setStream] = useState();\n  const [error, setError] = useState();\n  const [status, setStatus] = useState(\"pending\");\n\n  useEffect(() => {\n    let canceled = false;\n    setStatus(\"pending\");\n    navigator.mediaDevices.getUserMedia(constraints).then(\n      (stream) => {\n        if (!canceled) {\n          setStatus(\"resolved\");\n          setStream(stream);\n        }\n      },\n      (error) => {\n        if (!canceled) {\n          setStatus(\"rejected\");\n          setError(error);\n        }\n      }\n    );\n\n    return () => {\n      canceled = true;\n    };\n  }, [constraints]);\n\n  return { error, status, stream };\n}\n","import { useRef, useState, useCallback } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport { getFilteredBodyparts, drawTextPoints } from \"./utils\";\n\nimport \"./App.css\";\nimport VideoCamera from \"./VideoCamera\";\n\n// Settings for emoticons\nconst bodyPartsEmoticons = {\n  nose: \"ðŸ‘€\",\n  leftEye: \"ðŸ’©\",\n  rightEye: \"ðŸ’©\",\n  // leftEar: \"\",\n  // rightEar: \"\",\n  // leftShoulder: \"\",\n  // rightShoulder: \"\",\n  // leftElbow: \"\",\n  // rightElbow: \"\",\n  // leftWrist: \"\",\n  // rightWrist: \"\",\n  // leftHip: \"\",\n  // rightHip: \"\",\n  // leftKnee: \"\",\n  // rightKnee: \"\",\n  // leftAnkle: \"\",\n  // rightAnkle: \"\",\n};\n\nconst drawEmoticons = (pose, video, videoWidth, videoHeight, canvas) => {\n  const ctx = canvas.current.getContext(\"2d\");\n  const filteredResult = getFilteredBodyparts(\n    pose.keypoints,\n    bodyPartsEmoticons\n  );\n\n  canvas.current.width = videoWidth;\n  canvas.current.height = videoHeight;\n\n  drawTextPoints(filteredResult, 0.9, ctx, 1);\n};\n\nfunction stopAndRemoveTrack(mediaStream) {\n  return function (track) {\n    track.stop();\n    mediaStream.removeTrack(track);\n  };\n}\n\nfunction stopMediaStream(mediaStream) {\n  if (!mediaStream) {\n    return;\n  }\n\n  mediaStream.getTracks().forEach(stopAndRemoveTrack(mediaStream));\n}\n\nfunction App() {\n  const [facingMode, setFacingMode] = useState(\"user\");\n  const webcamEl = useRef(null);\n  const canvasEl = useRef(null);\n\n  const handleCameraClick = useCallback(() => {\n    const camera = webcamEl.current;\n    console.log(camera.srcObject);\n    // camera.pause();\n    // camera.srcObject = null;\n    stopMediaStream(camera.srcObject);\n    setFacingMode(facingMode === \"environment\" ? \"user\" : \"environment\");\n  }, [facingMode]);\n\n  const detectPose = async (posenet_model) => {\n    if (webcamEl.current !== null && webcamEl.current.readyState === 4) {\n      const camera = webcamEl.current;\n      const videoWidth = webcamEl.current.videoWidth;\n      const videoHeight = webcamEl.current.videoHeight;\n\n      webcamEl.current.width = videoWidth;\n      webcamEl.current.height = videoHeight;\n\n      // Get pose and detect body parts using the posenet model\n      const posenet = await posenet_model.estimateSinglePose(camera);\n      drawEmoticons(posenet, camera, videoWidth, videoHeight, canvasEl);\n    }\n  };\n\n  const initPoseNet = async () => {\n    const model = await posenet.load({\n      inputResolution: { width: 640, height: 480 },\n      scale: 0.8,\n    });\n\n    setInterval(() => {\n      detectPose(model);\n    }, 5000);\n  };\n\n  initPoseNet();\n\n  return (\n    <div className=\"App\">\n      <button onClick={handleCameraClick}>flipbutton</button>\n      <VideoCamera\n        videoRef={webcamEl}\n        constraints={{\n          video: {\n            facingMode,\n          },\n        }}\n      />\n      <canvas ref={canvasEl} />\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawTextPoints(keypoints, minConfidence, ctx, scale = 1) {\n  ctx.font = \"16px Arial\";\n  ctx.textAlign = \"center\";\n\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n\n    // Draws the text/emoticons on the keypoints\n    ctx.beginPath();\n    ctx.arc(x * scale, y * scale, 3, 0, 2 * Math.PI);\n    ctx.fillText(keypoint.emoticon, x, y);\n  }\n}\n\n/**\n * Get filtered bodyparts\n */\nexport const getFilteredBodyparts = (keypoints, bodyparts) =>\n  keypoints.reduce((filtered, option) => {\n    if (Object.keys(bodyparts).includes(option.part)) {\n      filtered.push({\n        ...option,\n        emoticon: bodyparts[option.part],\n      });\n    }\n    return filtered;\n  }, []);\n\n/**\n * Sets active camera contraints\n * @todo create seperate fuctions for updating camera and getting contraints\n */\nexport function getConstraints(camera) {\n  if (camera) {\n    return {\n      audio: false,\n      video: camera,\n    };\n  }\n\n  return {\n    audio: false,\n    video: {\n      facingMode: \"user\",\n    },\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}