[{"/Users/stefvantschip/Documents/code/codetests/tensorflow/src/App.js":"1","/Users/stefvantschip/Documents/code/codetests/tensorflow/src/utils.js":"2","/Users/stefvantschip/Documents/code/codetests/tensorflow/src/VideoCamera.js":"3","/Users/stefvantschip/Documents/code/codetests/tensorflow/src/reportWebVitals.js":"4","/Users/stefvantschip/Documents/code/codetests/tensorflow/src/index.js":"5"},{"size":2051,"mtime":1611518968784,"results":"6","hashOfConfig":"7"},{"size":1123,"mtime":1611521580101,"results":"8","hashOfConfig":"7"},{"size":1360,"mtime":1611521556706,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1611399315177,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1611399315176,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1wc3gmu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stefvantschip/Documents/code/codetests/tensorflow/src/App.js",["23"],"import { useRef } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport { getFilteredBodyparts, drawTextPoints } from \"./utils\";\n\nimport \"./App.css\";\nimport VideoCamera from \"./VideoCamera\";\n\n// Settings for emoticons\nconst bodyPartsEmoticons = {\n  nose: \"ðŸ‘€\",\n  leftEye: \"ðŸ’©\",\n  rightEye: \"ðŸ’©\",\n  // leftEar: \"\",\n  // rightEar: \"\",\n  // leftShoulder: \"\",\n  // rightShoulder: \"\",\n  // leftElbow: \"\",\n  // rightElbow: \"\",\n  // leftWrist: \"\",\n  // rightWrist: \"\",\n  // leftHip: \"\",\n  // rightHip: \"\",\n  // leftKnee: \"\",\n  // rightKnee: \"\",\n  // leftAnkle: \"\",\n  // rightAnkle: \"\",\n};\n\nconst drawEmoticons = (pose, video, videoWidth, videoHeight, canvas) => {\n  const ctx = canvas.current.getContext(\"2d\");\n  const filteredResult = getFilteredBodyparts(\n    pose.keypoints,\n    bodyPartsEmoticons\n  );\n\n  canvas.current.width = videoWidth;\n  canvas.current.height = videoHeight;\n\n  drawTextPoints(filteredResult, 0.9, ctx, 1);\n};\n\nfunction App() {\n  const webcamEl = useRef(null);\n  const canvasEl = useRef(null);\n\n  const detectPose = async (posenet_model) => {\n    if (webcamEl.current !== null && webcamEl.current.readyState === 4) {\n      const camera = webcamEl.current;\n      const videoWidth = webcamEl.current.videoWidth;\n      const videoHeight = webcamEl.current.videoHeight;\n\n      webcamEl.current.width = videoWidth;\n      webcamEl.current.height = videoHeight;\n\n      // Get pose and detect body parts using the posenet model\n      const posenet = await posenet_model.estimateSinglePose(camera);\n      drawEmoticons(posenet, camera, videoWidth, videoHeight, canvasEl);\n    }\n  };\n\n  const initPoseNet = async () => {\n    const model = await posenet.load({\n      inputResolution: { width: 640, height: 480 },\n      scale: 0.8,\n    });\n\n    setInterval(() => {\n      detectPose(model);\n    }, 5000);\n  };\n\n  initPoseNet();\n\n  return (\n    <div className=\"App\">\n      <VideoCamera videoRef={webcamEl} />\n      <canvas ref={canvasEl} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/stefvantschip/Documents/code/codetests/tensorflow/src/utils.js",[],"/Users/stefvantschip/Documents/code/codetests/tensorflow/src/VideoCamera.js",[],"/Users/stefvantschip/Documents/code/codetests/tensorflow/src/reportWebVitals.js",[],"/Users/stefvantschip/Documents/code/codetests/tensorflow/src/index.js",[],{"ruleId":"24","severity":1,"message":"25","line":2,"column":13,"nodeType":"26","messageId":"27","endLine":2,"endColumn":15},"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar"]